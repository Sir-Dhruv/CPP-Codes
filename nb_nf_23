import React, { useState, useEffect } from "react";
import axios from "axios";
import {
  Accordion,
  AccordionSummary,
  AccordionDetails,
  Typography,
  TextField,
  Button,
  Dialog,
  DialogActions,
  DialogContent,
  DialogTitle,
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableRow,
  Chip,
  Paper,
} from "@mui/material";
import ExpandMoreIcon from "@mui/icons-material/ExpandMore";

const PayrollApprovalSystem = () => {
  const [batches, setBatches] = useState([]);
  const [openDialog, setOpenDialog] = useState(false);
  const [selectedBatch, setSelectedBatch] = useState(null);
  const [remarks, setRemarks] = useState("");
  const [filter, setFilter] = useState("");

  // ✅ Fetch batches from backend
  useEffect(() => {
    axios.get("http://localhost:8080/api/batches") // backend endpoint
      .then((res) => setBatches(res.data))
      .catch((err) => console.error(err));
  }, []);

  const handleOpenDialog = (batch) => {
    setSelectedBatch(batch);
    setOpenDialog(true);
  };

  const handleCloseDialog = () => {
    setOpenDialog(false);
    setRemarks("");
  };

  // ✅ Approve or Reject
  const handleApproval = (status) => {
    if (!selectedBatch) return;

    const url =
      status === "Approved"
        ? `http://localhost:8080/api/approvals/approve/${selectedBatch.id}`
        : `http://localhost:8080/api/approvals/reject/${selectedBatch.id}`;

    axios
      .post(url, null, {
        params: {
          approverName: "Bob", // from logged-in user session ideally
          remarks: remarks,
        },
      })
      .then(() => {
        // Refresh list after approval/rejection
        return axios.get("http://localhost:8080/api/batches");
      })
      .then((res) => setBatches(res.data))
      .catch((err) => console.error(err));

    handleCloseDialog();
  };

  const filteredBatches = batches.filter(
    (batch) =>
      batch.id.toLowerCase().includes(filter.toLowerCase()) ||
      batch.date.includes(filter)
  );

  // ✅ Calculate batch status
  const getBatchStatus = (approvers) => {
    if (approvers.some((a) => a.status === "Rejected")) return "Rejected";
    if (approvers.every((a) => a.status === "Approved")) return "Fully Approved";
    if (approvers.some((a) => a.status === "Approved")) return "Partially Approved";
    return "Pending";
  };

  return (
    <Paper style={{ padding: 20, backgroundColor: "#f5faff" }}>
      <Typography variant="h4" gutterBottom color="primary" align="center">
        Payroll Approval System
      </Typography>

      <TextField
        label="Filter by Batch ID or Date"
        variant="outlined"
        fullWidth
        margin="normal"
        value={filter}
        onChange={(e) => setFilter(e.target.value)}
      />

      {filteredBatches.map((batch) => {
        const batchStatus = getBatchStatus(batch.approvers);
        const bob = batch.approvers.find((a) => a.name === "Bob");
        return (
          <Accordion key={batch.id}>
            <AccordionSummary expandIcon={<ExpandMoreIcon />}>
              <Typography color="primary" variant="h6">
                {batch.id} - {batch.date} (₹{batch.totalAmount.toLocaleString()}){" "}
                <Chip
                  label={batchStatus}
                  color={
                    batchStatus === "Fully Approved"
                      ? "success"
                      : batchStatus === "Rejected"
                      ? "error"
                      : batchStatus === "Partially Approved"
                      ? "warning"
                      : "default"
                  }
                  size="small"
                  style={{ marginLeft: 10 }}
                />
              </Typography>
            </AccordionSummary>
            <AccordionDetails>
              <Typography variant="subtitle1">Payments</Typography>
              <Table size="small">
                <TableHead>
                  <TableRow>
                    <TableCell>Payment ID</TableCell>
                    <TableCell>Employee</TableCell>
                    <TableCell>Amount</TableCell>
                  </TableRow>
                </TableHead>
                <TableBody>
                  {batch.payments.map((payment) => (
                    <TableRow key={payment.id}>
                      <TableCell>{payment.id}</TableCell>
                      <TableCell>{payment.employee}</TableCell>
                      <TableCell>
                        ₹{payment.amount.toLocaleString()}
                      </TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>

              <Typography variant="subtitle1" style={{ marginTop: 16 }}>
                Approval History
              </Typography>
              <Table size="small">
                <TableHead>
                  <TableRow>
                    <TableCell>Approver</TableCell>
                    <TableCell>Status / Remarks</TableCell>
                  </TableRow>
                </TableHead>
                <TableBody>
                  {batch.approvers.map((approver) => (
                    <TableRow
                      key={approver.id}
                      style={{
                        backgroundColor:
                          approver.status === "Rejected"
                            ? "#ffe5e5"
                            : approver.status === "Approved"
                            ? "#e5ffe5"
                            : "inherit",
                      }}
                    >
                      <TableCell>{approver.name}</TableCell>
                      <TableCell>
                        <Chip
                          label={approver.status}
                          color={
                            approver.status === "Approved"
                              ? "success"
                              : approver.status === "Rejected"
                              ? "error"
                              : "default"
                          }
                          size="small"
                        />
                        {approver.remarks && (
                          <div style={{ fontSize: "0.8rem", marginTop: 4 }}>
                            Remark: {approver.remarks}
                          </div>
                        )}
                      </TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>

              {bob && bob.status === "Pending" && (
                <Button
                  variant="contained"
                  color="primary"
                  style={{ marginTop: 16 }}
                  onClick={() => handleOpenDialog(batch)}
                >
                  Take Action
                </Button>
              )}
            </AccordionDetails>
          </Accordion>
        );
      })}

      <Dialog open={openDialog} onClose={handleCloseDialog}>
        <DialogTitle>Approval Action</DialogTitle>
        <DialogContent>
          <TextField
            label="Remarks"
            variant="outlined"
            fullWidth
            margin="normal"
            value={remarks}
            onChange={(e) => setRemarks(e.target.value)}
          />
        </DialogContent>
        <DialogActions>
          <Button onClick={() => handleApproval("Rejected")} color="error">
            Reject
          </Button>
          <Button onClick={() => handleApproval("Approved")} color="primary">
            Approve
          </Button>
        </DialogActions>
      </Dialog>
    </Paper>
  );
};

export default PayrollApprovalSystem;